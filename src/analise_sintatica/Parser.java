
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 06 10:34:24 BRT 2016
//----------------------------------------------------

package analise_sintatica;

import analise_sintatica.Simbolo;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 06 10:34:24 BRT 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\006\000\002\005\006\000" +
    "\002\006\010\000\002\007\011\000\002\020\002\000\002" +
    "\020\003\000\002\020\003\000\002\021\005\000\002\022" +
    "\005\000\002\010\003\000\002\010\006\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\013\005\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\005\000\002\016\007\000\002\017\003" +
    "\000\002\017\003\000\002\023\010\000\002\023\012\000" +
    "\002\023\007\000\002\023\003\000\002\023\004\000\002" +
    "\023\003\000\002\024\012\000\002\024\007\000\002\024" +
    "\003\000\002\024\004\000\002\024\003\000\002\025\006" +
    "\000\002\026\003\000\002\026\006\000\002\027\005\000" +
    "\002\030\002\000\002\030\003\000\002\031\003\000\002" +
    "\031\004\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\004\000\002\033\012" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\005\000\002\033\005\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\005\000\002\034\003\000\002" +
    "\035\005\000\002\036\005\000\002\041\006\000\002\037" +
    "\002\000\002\037\004\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\014\002\000\004\000\005\000\006\000\007" +
    "\000\001\002\000\014\002\010\004\011\005\016\006\007" +
    "\007\014\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\001\002\000\014\002\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\001\002\000\004\050\173\001\002\000" +
    "\004\002\001\001\002\000\010\026\023\027\020\030\022" +
    "\001\002\000\014\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\001\002\000\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\001\002\000\010\026\023\027\020\030\022\001" +
    "\002\000\014\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\001\002\000\010\026\023\027\020\030\022\001\002\000" +
    "\006\016\026\050\025\001\002\000\006\016\uffee\050\uffee" +
    "\001\002\000\006\016\ufff1\050\ufff1\001\002\000\006\016" +
    "\uffed\050\uffed\001\002\000\006\016\uffef\050\uffef\001\002" +
    "\000\004\022\144\001\002\000\004\024\124\001\002\000" +
    "\026\010\036\014\044\020\030\031\031\032\045\033\034" +
    "\034\037\036\027\045\041\050\040\001\002\000\026\010" +
    "\036\014\044\020\030\031\031\032\045\033\034\034\037" +
    "\036\027\045\041\050\040\001\002\000\002\001\002\000" +
    "\054\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\012\uffbb" +
    "\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\046\uffbb\047\uffbb\001\002\000\056\002\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\012\uffb7\015\uffb7\016\114\017\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7" +
    "\001\002\000\030\017\113\035\054\036\047\037\052\040" +
    "\057\041\053\042\055\043\056\044\051\046\050\047\061" +
    "\001\002\000\054\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\012\uffb9\015\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\046\uffb9\047\uffb9\001\002\000\054\002\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\012\uffbc\015\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047" +
    "\uffbc\001\002\000\004\014\104\001\002\000\054\002\uffb8" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\012\uffb8\015\uffb8\017" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\047" +
    "\uffb8\001\002\000\062\002\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\012\uffd4\014\075\015\uffd4\016\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\047" +
    "\uffd4\001\002\000\026\010\036\014\044\020\030\031\031" +
    "\032\045\033\034\034\037\036\027\045\041\050\040\001" +
    "\002\000\054\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\012\uffca\015\uffca\017\uffca\021\uffca\022\uffca\023\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\047\uffca\001\002\000\054\002\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\012\uffb5\015\uffb5\017\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5" +
    "\001\002\000\026\010\036\014\044\020\030\031\031\032" +
    "\045\033\034\034\037\036\027\045\041\050\040\001\002" +
    "\000\054\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\012" +
    "\uffba\015\uffba\017\uffba\021\uffba\022\uffba\023\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\046\uffba\047\uffba\001\002\000\030\015\060\035\054" +
    "\036\047\037\052\040\057\041\053\042\055\043\056\044" +
    "\051\046\050\047\061\001\002\000\026\010\036\014\044" +
    "\020\030\031\031\032\045\033\034\034\037\036\027\045" +
    "\041\050\040\001\002\000\026\010\036\014\044\020\030" +
    "\031\031\032\045\033\034\034\037\036\027\045\041\050" +
    "\040\001\002\000\026\010\036\014\044\020\030\031\031" +
    "\032\045\033\034\034\037\036\027\045\041\050\040\001" +
    "\002\000\026\010\036\014\044\020\030\031\031\032\045" +
    "\033\034\034\037\036\027\045\041\050\040\001\002\000" +
    "\026\010\036\014\044\020\030\031\031\032\045\033\034" +
    "\034\037\036\027\045\041\050\040\001\002\000\026\010" +
    "\036\014\044\020\030\031\031\032\045\033\034\034\037" +
    "\036\027\045\041\050\040\001\002\000\026\010\036\014" +
    "\044\020\030\031\031\032\045\033\034\034\037\036\027" +
    "\045\041\050\040\001\002\000\026\010\036\014\044\020" +
    "\030\031\031\032\045\033\034\034\037\036\027\045\041" +
    "\050\040\001\002\000\026\010\036\014\044\020\030\031" +
    "\031\032\045\033\034\034\037\036\027\045\041\050\040" +
    "\001\002\000\054\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\012\uffb6\015\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\046\uffb6\047\uffb6\001\002\000\026\010\036" +
    "\014\044\020\030\031\031\032\045\033\034\034\037\036" +
    "\027\045\041\050\040\001\002\000\054\002\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\012\uffbd\015\uffbd\017\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\001" +
    "\002\000\054\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\012\uffc4\015\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\055\043\056" +
    "\044\051\046\050\047\061\001\002\000\054\002\uffc1\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\012\uffc1\015\uffc1\017\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\055\043\uffc1\044\uffc1\046\050\047\061" +
    "\001\002\000\054\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\012\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\046\050\047\061\001\002\000\054\002\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\012\uffc7\015\uffc7\017" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\035\uffc7\036\uffc7\037\052" +
    "\040\057\041\053\042\055\043\056\044\051\046\050\047" +
    "\061\001\002\000\054\002\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\012\uffc3\015\uffc3\017\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\055" +
    "\043\056\044\051\046\050\047\061\001\002\000\054\002" +
    "\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\012\uffc5\015\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\055\043\056\044\051\046\050" +
    "\047\061\001\002\000\054\002\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\012\uffc0\015\uffc0\017\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\055\043\uffc0\044\uffc0\046\050\047\061\001\002\000\054" +
    "\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\012\uffbe\015" +
    "\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046" +
    "\uffbe\047\uffbe\001\002\000\054\002\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\012\uffc6\015\uffc6\017\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\035\uffc6\036\uffc6\037\052\040\057\041\053" +
    "\042\055\043\056\044\051\046\050\047\061\001\002\000" +
    "\054\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\012\uffbf" +
    "\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\035\054\036" +
    "\047\037\052\040\057\041\053\042\055\043\056\044\051" +
    "\046\050\047\061\001\002\000\030\010\036\014\044\015" +
    "\uffb1\020\030\031\031\032\045\033\034\034\037\036\027" +
    "\045\041\050\040\001\002\000\030\023\102\035\054\036" +
    "\047\037\052\040\057\041\053\042\055\043\056\044\051" +
    "\046\050\047\061\001\002\000\004\015\100\001\002\000" +
    "\054\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\012\uffb2" +
    "\015\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\046\uffb2\047\uffb2\001\002\000\006\015\uffb0\017\uffb0\001" +
    "\002\000\032\010\036\014\044\015\uffb1\017\uffb1\020\030" +
    "\031\031\032\045\033\034\034\037\036\027\045\041\050" +
    "\040\001\002\000\006\015\uffaf\017\uffaf\001\002\000\026" +
    "\010\036\014\044\020\030\031\031\032\045\033\034\034" +
    "\037\036\027\045\041\050\040\001\002\000\030\015\106" +
    "\035\054\036\047\037\052\040\057\041\053\042\055\043" +
    "\056\044\051\046\050\047\061\001\002\000\004\011\107" +
    "\001\002\000\026\010\036\014\044\020\030\031\031\032" +
    "\045\033\034\034\037\036\027\045\041\050\040\001\002" +
    "\000\030\012\111\035\054\036\047\037\052\040\057\041" +
    "\053\042\055\043\056\044\051\046\050\047\061\001\002" +
    "\000\026\010\036\014\044\020\030\031\031\032\045\033" +
    "\034\034\037\036\027\045\041\050\040\001\002\000\054" +
    "\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\012\uffc8\015" +
    "\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\035\054\036\047" +
    "\037\052\040\057\041\053\042\055\043\056\044\051\046" +
    "\050\047\061\001\002\000\006\016\ufff0\050\ufff0\001\002" +
    "\000\026\010\036\014\044\020\030\031\031\032\045\033" +
    "\034\034\037\036\027\045\041\050\040\001\002\000\030" +
    "\017\116\035\054\036\047\037\052\040\057\041\053\042" +
    "\055\043\056\044\051\046\050\047\061\001\002\000\060" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\012\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\046\uffd3\047\uffd3\001\002\000\006\005\016" +
    "\021\120\001\002\000\054\002\uffb4\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\012\uffb4\015\uffb4\017\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\046\uffb4\047\uffb4\001\002\000\026" +
    "\010\036\014\044\020\030\031\031\032\045\033\034\034" +
    "\037\036\027\045\041\050\040\001\002\000\032\005\uffb3" +
    "\021\uffb3\035\054\036\047\037\052\040\057\041\053\042" +
    "\055\043\056\044\051\046\050\047\061\001\002\000\054" +
    "\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\012\uffc9\015" +
    "\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\035\uffc9\036\uffc9" +
    "\037\052\040\057\041\053\042\055\043\056\044\051\046" +
    "\050\047\061\001\002\000\030\010\036\014\044\016\125" +
    "\020\030\031\031\032\045\033\034\034\037\036\027\045" +
    "\041\050\040\001\002\000\030\010\036\014\044\017\uffb1" +
    "\020\030\031\031\032\045\033\034\034\037\036\027\045" +
    "\041\050\133\001\002\000\032\022\uffe7\023\uffe7\035\054" +
    "\036\047\037\052\040\057\041\053\042\055\043\056\044" +
    "\051\046\050\047\061\001\002\000\006\022\uffe8\023\uffe8" +
    "\001\002\000\006\022\uffe5\023\uffe5\001\002\000\006\022" +
    "\uffe6\023\uffe6\001\002\000\004\017\143\001\002\000\036" +
    "\014\075\016\uffd4\023\uffd4\025\134\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4" +
    "\047\uffd4\001\002\000\030\010\036\014\044\016\135\020" +
    "\030\031\031\032\045\033\034\034\037\036\027\045\041" +
    "\050\040\001\002\000\004\050\142\001\002\000\030\017" +
    "\uffe1\035\054\036\047\037\052\040\057\041\053\042\055" +
    "\043\056\044\051\046\050\047\061\001\002\000\004\017" +
    "\141\001\002\000\004\017\uffe2\001\002\000\010\017\uffe3" +
    "\022\uffe3\023\uffe3\001\002\000\004\025\134\001\002\000" +
    "\006\022\uffe4\023\uffe4\001\002\000\044\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\013\ufff9\014\ufff9\020" +
    "\ufff9\021\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9" +
    "\045\ufff9\050\ufff9\001\002\000\006\016\026\050\146\001" +
    "\002\000\004\014\147\001\002\000\006\004\150\015\ufff6" +
    "\001\002\000\010\026\023\027\020\030\022\001\002\000" +
    "\004\015\156\001\002\000\006\015\ufff5\023\154\001\002" +
    "\000\004\015\ufff4\001\002\000\006\004\150\015\ufff6\001" +
    "\002\000\004\015\ufff3\001\002\000\026\010\036\014\044" +
    "\020\030\031\031\032\045\033\034\034\037\036\027\045" +
    "\041\050\040\001\002\000\040\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\035\054\036\047\037\052\040\057\041" +
    "\053\042\055\043\056\044\051\046\050\047\061\001\002" +
    "\000\004\050\161\001\002\000\006\015\ufff2\023\ufff2\001" +
    "\002\000\006\016\026\050\164\001\002\000\004\022\172" +
    "\001\002\000\010\022\uffec\023\170\024\124\001\002\000" +
    "\006\022\uffeb\023\166\001\002\000\004\050\164\001\002" +
    "\000\004\022\uffe9\001\002\000\004\050\164\001\002\000" +
    "\004\022\uffea\001\002\000\026\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\013\ufffa\020\ufffa\021\ufffa\050" +
    "\ufffa\001\002\000\004\014\174\001\002\000\006\004\150" +
    "\015\ufff6\001\002\000\004\015\176\001\002\000\012\010" +
    "\204\013\177\020\200\050\040\001\002\000\004\014\255" +
    "\001\002\000\020\004\011\005\016\010\204\013\177\020" +
    "\200\021\uffd1\050\040\001\002\000\026\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\013\uffdb\020\uffdb\021" +
    "\uffdb\050\uffdb\001\002\000\014\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\001\002\000\006\016\114\024\242\001" +
    "\002\000\004\014\210\001\002\000\004\022\207\001\002" +
    "\000\026\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\013\uffdd\020\uffdd\021\uffdd\050\uffdd\001\002\000\026" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\013" +
    "\uffdc\020\uffdc\021\uffdc\050\uffdc\001\002\000\026\010\036" +
    "\014\044\020\030\031\031\032\045\033\034\034\037\036" +
    "\027\045\041\050\040\001\002\000\030\015\212\035\054" +
    "\036\047\037\052\040\057\041\053\042\055\043\056\044" +
    "\051\046\050\047\061\001\002\000\004\011\213\001\002" +
    "\000\012\010\220\013\214\020\200\050\040\001\002\000" +
    "\004\014\235\001\002\000\030\002\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\012\uffd6\013\uffdb\020\uffdb\021" +
    "\uffdb\050\uffdb\001\002\000\026\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\013\uffe0\020\uffe0\021\uffe0\050" +
    "\uffe0\001\002\000\004\012\234\001\002\000\004\014\224" +
    "\001\002\000\004\022\223\001\002\000\030\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffd8\013\uffdd" +
    "\020\uffdd\021\uffdd\050\uffdd\001\002\000\030\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffd7\013\uffdc" +
    "\020\uffdc\021\uffdc\050\uffdc\001\002\000\026\010\036\014" +
    "\044\020\030\031\031\032\045\033\034\034\037\036\027" +
    "\045\041\050\040\001\002\000\030\015\226\035\054\036" +
    "\047\037\052\040\057\041\053\042\055\043\056\044\051" +
    "\046\050\047\061\001\002\000\004\011\227\001\002\000" +
    "\012\010\220\013\214\020\200\050\040\001\002\000\004" +
    "\012\231\001\002\000\012\010\220\013\214\020\200\050" +
    "\040\001\002\000\026\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\013\uffdf\020\uffdf\021\uffdf\050\uffdf\001" +
    "\002\000\004\012\uffda\001\002\000\012\010\204\013\177" +
    "\020\200\050\040\001\002\000\026\010\036\014\044\020" +
    "\030\031\031\032\045\033\034\034\037\036\027\045\041" +
    "\050\040\001\002\000\030\015\237\035\054\036\047\037" +
    "\052\040\057\041\053\042\055\043\056\044\051\046\050" +
    "\047\061\001\002\000\012\010\220\013\214\020\200\050" +
    "\040\001\002\000\026\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\013\uffde\020\uffde\021\uffde\050\uffde\001" +
    "\002\000\004\012\uffd9\001\002\000\026\010\036\014\044" +
    "\020\030\031\031\032\045\033\034\034\037\036\027\045" +
    "\041\050\040\001\002\000\030\022\244\035\054\036\047" +
    "\037\052\040\057\041\053\042\055\043\056\044\051\046" +
    "\050\047\061\001\002\000\030\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\020\uffd5\021" +
    "\uffd5\050\uffd5\001\002\000\020\004\uffcc\005\uffcc\010\uffcc" +
    "\013\uffcc\020\uffcc\021\uffcc\050\uffcc\001\002\000\020\004" +
    "\uffcb\005\uffcb\010\uffcb\013\uffcb\020\uffcb\021\uffcb\050\uffcb" +
    "\001\002\000\004\021\254\001\002\000\020\004\uffcf\005" +
    "\uffcf\010\uffcf\013\uffcf\020\uffcf\021\uffcf\050\uffcf\001\002" +
    "\000\020\004\uffcd\005\uffcd\010\uffcd\013\uffcd\020\uffcd\021" +
    "\uffcd\050\uffcd\001\002\000\020\004\011\005\016\010\204" +
    "\013\177\020\200\021\uffd0\050\040\001\002\000\020\004" +
    "\uffce\005\uffce\010\uffce\013\uffce\020\uffce\021\uffce\050\uffce" +
    "\001\002\000\030\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\012\uffd2\013\uffd2\020\uffd2\021\uffd2\050\uffd2" +
    "\001\002\000\026\010\036\014\044\020\030\031\031\032" +
    "\045\033\034\034\037\036\027\045\041\050\040\001\002" +
    "\000\030\015\257\035\054\036\047\037\052\040\057\041" +
    "\053\042\055\043\056\044\051\046\050\047\061\001\002" +
    "\000\012\010\204\013\177\020\200\050\040\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\004\002\003\001\001\000\014\003\011\004" +
    "\012\005\004\006\005\007\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\161\011\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\144\011\020\001\001\000\002\001" +
    "\001\000\006\010\016\011\020\001\001\000\004\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\026\031\033\032\034\041\035\034\041\042\001" +
    "\001\000\014\026\031\033\122\034\041\035\034\041\042" +
    "\001\001\000\004\036\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\031\033\073\034\041\035\034\041\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\031\033\045\034\041\035\034\041\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\031\033\072\034" +
    "\041\035\034\041\042\001\001\000\014\026\031\033\071" +
    "\034\041\035\034\041\042\001\001\000\014\026\031\033" +
    "\070\034\041\035\034\041\042\001\001\000\014\026\031" +
    "\033\067\034\041\035\034\041\042\001\001\000\014\026" +
    "\031\033\066\034\041\035\034\041\042\001\001\000\014" +
    "\026\031\033\065\034\041\035\034\041\042\001\001\000" +
    "\014\026\031\033\064\034\041\035\034\041\042\001\001" +
    "\000\014\026\031\033\063\034\041\035\034\041\042\001" +
    "\001\000\014\026\031\033\062\034\041\035\034\041\042" +
    "\001\001\000\002\001\001\000\014\026\031\033\061\034" +
    "\041\035\034\041\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\026\031\033\075\034\041\035\034\037\076\041\042" +
    "\001\001\000\004\040\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\031\033\075" +
    "\034\041\035\034\037\102\041\042\001\001\000\002\001" +
    "\001\000\014\026\031\033\104\034\041\035\034\041\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\031\033\107\034\041\035\034\041\042\001\001\000\002" +
    "\001\001\000\014\026\031\033\111\034\041\035\034\041" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\031\033\114\034\041\035\034\041\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\120\001\001" +
    "\000\002\001\001\000\014\026\031\033\121\034\041\035" +
    "\034\041\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\126\015\130\016\127\026\031\033\125\034" +
    "\041\035\034\041\042\001\001\000\016\026\031\033\075" +
    "\034\041\035\034\037\131\041\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\137\017" +
    "\136\026\031\033\135\034\041\035\034\041\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\150\021\152\022\151\001\001\000\004" +
    "\011\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\154\021\152\022\151\001\001" +
    "\000\002\001\001\000\014\026\031\033\156\034\041\035" +
    "\034\041\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\162\013\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\166\013\164\001\001\000\002\001\001\000\006\012" +
    "\170\013\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\174\021\152\022\151\001" +
    "\001\000\002\001\001\000\014\023\201\025\205\026\202" +
    "\027\200\041\204\001\001\000\002\001\001\000\026\004" +
    "\250\005\244\023\245\025\205\026\202\027\200\030\246" +
    "\031\251\032\247\041\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\031\033\210\034\041\035\034\041\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\215\024\216\025" +
    "\221\026\202\027\214\041\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\031\033\224\034\041\035\034\041" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\215\024\227\025\221\026\202\027\214\041\220\001" +
    "\001\000\002\001\001\000\016\023\231\024\232\025\221" +
    "\026\202\027\214\041\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\231\025\205\026\202\027\200" +
    "\041\204\001\001\000\014\026\031\033\235\034\041\035" +
    "\034\041\042\001\001\000\002\001\001\000\016\023\237" +
    "\024\240\025\221\026\202\027\214\041\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\031\033\242" +
    "\034\041\035\034\041\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\250\005\244\023\245\025\205\026\202\027\200\032\252" +
    "\041\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\026\031\033\255\034\041\035\034\041\042\001\001" +
    "\000\002\001\001\000\014\023\237\025\205\026\202\027" +
    "\200\041\204\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");

        if (info instanceof java_cup.runtime.Symbol) {
            m.append( "("+info.toString()+")" );
        }
        m.append(" : "+message);
        System.out.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp_list_opt ::= COMMA exp_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list_opt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp_list ::= exp exp_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // chamada ::= IDENTIFIER LPAREN exp_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dec_cons_list ::= dec_cons_list dec_cons exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_cons_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bloco_exp ::= LBRACE dec_cons_list RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_exp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_exp ::= chamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_exp ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_exp ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_exp ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simple_exp ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simple_exp ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= bloco_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp OR exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp AND exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= NOT exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp LTHAN exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp GTHAN exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp EQ exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp MOD exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp DIV exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp MULT exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp MINUS exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp PLUS exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= IF LPAREN exp RPAREN THEN exp ELSE exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= MINUS exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloco_comandos ::= comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloco_comandos ::= dec_cons 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloco_comandos ::= dec_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloco_comandos_list ::= bloco_comandos_list bloco_comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloco_comandos_list ::= bloco_comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_comandos_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloco_com ::= bloco_comandos_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_com",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloco_com ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_com",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloco ::= LBRACE bloco_com RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable ::= variable LBRACK exp RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assign ::= variable ATTRIB exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando_esp ::= bloco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_esp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando_esp ::= chamada SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_esp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando_esp ::= assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_esp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando_esp ::= WHILE LPAREN exp RPAREN comando_esp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_esp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando_esp ::= IF LPAREN exp RPAREN THEN comando_esp ELSE comando_esp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_esp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando ::= bloco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando ::= chamada SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comando ::= assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comando ::= WHILE LPAREN exp RPAREN comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comando ::= IF LPAREN exp RPAREN THEN comando_esp ELSE comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comando ::= IF LPAREN exp RPAREN THEN comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_comp_opt ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_comp_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_comp_opt ::= array_comp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_comp_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array_comp ::= LBRACK IDENTIFIER TQ array_comp_opt RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_comp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // array_ext ::= LBRACK exp_list RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_ext",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inic_opt ::= array_comp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inic_opt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inic_opt ::= array_ext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inic_opt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inic_opt ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inic_opt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inicializacao ::= IDENTIFIER ATTRIB inic_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacao",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_var_inic_opt ::= inicializacao COMMA list_var_inic_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_var_inic_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_var_inic_opt ::= IDENTIFIER COMMA list_var_inic_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_var_inic_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_var_inic_opt ::= inicializacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_var_inic_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_var_inic_opt ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_var_inic_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_base ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_base",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_base ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_base",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_base ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_base",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= tipo LBRACK exp RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= tipo_base 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= VAR tipo_base IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_param ::= parametro COMMA parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= lista_param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_funcao ::= FUNCTION tipo IDENTIFIER LPAREN parametros RPAREN exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_funcao",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_procedimento ::= PROCEDURE IDENTIFIER LPAREN parametros RPAREN comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_procedimento",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_cons ::= CONS tipo inicializacao SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_cons",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_var ::= VAR tipo list_var_inic_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_var",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_list ::= dec_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_list ::= dec_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_list ::= dec_cons 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= dec_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Programa dec_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

